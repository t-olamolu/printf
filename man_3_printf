.TH man 3 "01 October 2021" "0.1" "ALX-HOLBERTON SCHOOL" "CUSTOM _PRINTF"
.SH _PRINTF()

.SH NAME
.B printf

.SH SYNOPSIS
.B #include "main.h"

.B int _printf(const char *format, ...);

.SH DESCRIPTION
- The function _printf produces a standard output according to a format.
- Much like the C standard library function printf, it can receive a variable number of arguments.

.SH Format of the format string
- The format string is a character string, beginning and ending in its initial shift state.
.TP
.SH Flag characters
- The character % is followed by zero or more of the following flags:
.B %c & %u
- prints a character
.br
.B %%
- prints a %
.br
.B %d & %i
- prints an integer
.br
.B %s
- prints a string
.br
.B %b
- prints a binary, custom specifier
.br
.B %o
- prints an octal number
.br
.B %x
- prints a hexadecimal number
.br
.B %X
- prints a hexadecimal in uppercase
.br
.B %u
- prints a character
.br
.B %S
- prints a %
.br
.B %p
- prints an address
.br
.B %r
- prints a string in reverse
.br
.B %R
- prints a string in rot13
.br
.B #
- The value should be converted to an "alternate form". For o conversions, the first character of the 
	output string is made zero (by prefixing a 0 if it was not zero already). For x and X conversions, 
	a nonzero result has the string "0x" (or "0X" for X conversions) prepended to it. For a, A, e, E, 
	f, F, g, and G conversions, the result will always contain a decimal point, even if no digits 
	follow it (normally, a decimal point appears in the results of those conversions only if a digit 
	follows). For g and G conversions, trailing zeros are not removed from the result as they would 
	otherwise be. For other conversions, the result is undefined.
.br
.B 0
- The value should be zero padded. For d, i, o, u, x, X, a, A, e, E, f, F, g, and G conversions, the 
	converted value is padded on the left with zeros rather than blanks. If the 0 and - flags both 
	appear, the 0 flag is ignored. If a precision is given with a numeric conversion (d, i, o, u, x, 
	and X), the 0 flag is ignored. For other conversions, the behavior is undefined.
.br
.B ' '(space)
- A blank should be left before a positive number (or empty string) produced by a signed conversion.

.SH Field Width
- An optional decimal digit string (with nonzero first digit) specifying a minimum field width.  If the 
	converted value has fewer characters than the field width, it will be padded with spaces on the left 
	(or right, if the left-adjustment flag has been given). Instead of a decimal digit string one may 
	write "*" or "*m$" (for some decimal integer m) to specify that the field width is given in the 
	next argument, or in the m-th argument, respectively, which must be of type int. A negative field 
	width is taken as a '-' flag followed by a positive field width.  In no case does a nonexistent or 
	small field width cause truncation of a field; if the result of a conversion is wider than the field 
	width, the field is expanded to contain the conversion result.

.SH Precision
-  An optional precision, in the form of a period ('.')  followed by an optional decimal digit string. 
	Instead of a decimal digit string one may write "*" or "*m$" (for some decimal integer m) to specify 
	that the precision is given in the next argument, or in the m-th argument, respectively, which must 
	be of type int. If the precision is given as just '.', the precision is taken to be zero. A negative 
	precision is taken as if the precision were omitted. This gives the minimum number of digits to appear 
	for d, i, o, u, x, and X conversions, the number of digits to appear after the radix character for a, 
	A, e, E, f, and F conversions, the maximum number of significant digits for g and G conversions, or the 
	maximum number of characters to be printed from a string for s and S conversions.

.SH Length modifier
- Here, "integer conversion" stands for d,i,o,u,x, or X conversion
.br
.B h
- A following integer conversion corresponds to a short or unsigned short argument.
.br
.B l
- (ell) A following integer conversion corresponds to a long or unsigned long argument.
.br
.B L
- A following a, A, e, E, f, F, g, or G conversion corresponds to a long double argument.

.SH Conversion specifiers
- A character that specifies the type of conversion to be applied.
- The conversion specifiers and their meanings are:
.br
.B d, i
- The int argument is converted to signed decimal notation. The precision, if any, gives the minimum number of 
	digits that must appear; if the converted value requires fewer digits, it is padded on the left with 
	zeros. The default precision is 1. When 0 is printed with an explicit precision 0, the output is empty.
.br
.B o, u, x, X
- The unsigned int argument is converted to unsigned octal (o), unsigned decimal (u), or unsigned hexadecimal 
	(x and X) notation. The letters abcdef are used for x conversions; the letters ABCDEF are used for X 
	conversions. The precision, if any, gives the minimum number of digits that must appear; if the converted 
	value requires fewer digits, it is padded on the left with zeros. The default precision is 1. When 0 
	is printed with an explicit precision 0, the output is empty.
.br
.B %
- A '%' is written. No argument is converted. The complete conversion specification is '%%'.

.SH SEE ALSO
.I printf(1), asprintf(3), puts(3), dprintf(3), scanf(3), setlocale(3), wcrtomb(3), strfromd(3), wprintf(3), locale(5)

.SH BUGS
.B '-', '+', ' '(space)
flags work almost flawlessly, but still having issues. Report bugs to https://github.com/t-olamolu/printf.

.SH EXIT STATUS
Return success unless an invalid option is given or a write or assignment error occurs.

.SH AUTHORS
Charles Shaldas Homsuk and Temitope Aderemi Olamolu
